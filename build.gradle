buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.jboss.arquillian.gradle:arquillian-gradle-plugin:0.1'
    }
}

plugins {
    id "org.flywaydb.flyway" version "4.0"
}

group 'java-tk'
version '1.0-SNAPSHOT'

apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'arquillian'

sourceCompatibility = 1.8

Properties loadProperties(String path) {
    def properties = new Properties()
    def inputStream = new FileInputStream(path)
    properties.load(inputStream)
    inputStream.close()
    properties
}

def testDatabaseProperties = loadProperties "configurataion/test-database.properties"
def devDatabaseProperties = loadProperties "configurataion/dev-database.properties"
def currentProperties = devDatabaseProperties;

configurations {
    itestCompile.extendsFrom compile
}

sourceSets {
    itest {
        java {
            srcDir file('src/itest/java')
        }
        compileClasspath += main.output
        runtimeClasspath += main.output
        resources.srcDir file('src/itest/resources')
    }
    main {
        java {
            srcDir "$buildDir/generated-src"
        }
    }
}

task copyItestLibs(type: Copy) {
    into "lib"
    from configurations.itestCompile - configurations.compile
}

task deleteLibFolder(type: Delete) {
    delete 'lib'
}

flyway {
    url = 'jdbc:mysql://localhost:3306/'
    user = 'root'
    password = 'root'
    schemas = ['film_studio']
    locations = ['filesystem:src/main/resources/db/migration',
                 'filesystem:src/main/resources/db/data']
}

repositories {
    jcenter();
}

dependencies {
    providedCompile 'javax:javaee-api:7.0'

    compile 'org.slf4j:slf4j-api:1.7.20'
    compile 'org.slf4j:slf4j-nop:1.7.20'
    compile 'mysql:mysql-connector-java:5.1.38'
    compile 'org.mongodb:mongodb-driver:3.2.2'

    itestCompile 'org.jboss.arquillian.junit:arquillian-junit-container:1.1.11.Final'
    itestCompile 'org.arquillian.container:arquillian-container-chameleon:1.0.0.Alpha6'
    itestCompile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-gradle-depchain:2.2.2'
    itestCompile 'org.dbunit:dbunit:2.5.1'

    testCompile 'junit:junit:4.11'

//    https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo
    testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.3'
}

task arquillianBuild << {
}

task configureArquillianWar << {
    war {
        from('src/itest/resources') {
            into 'WEB-INF/classes'
        }
        classpath configurations.itestCompile - configurations.compile + sourceSets.itest.runtimeClasspath
    }
}

arquillianBuild.dependsOn configureArquillianWar
arquillianBuild.dependsOn build
build.mustRunAfter configureArquillianWar

task prepareITestDatabase << {
    flyway {
        url = 'jdbc:mysql://localhost:3306/'
        user = 'root'
        password = 'root'
        schemas = ['film_studio_test']
        locations = ['filesystem:src/main/resources/db/migration']
    }
}



task itest(type: Test) {
    testClassesDir = sourceSets.itest.output.classesDir
    classpath = sourceSets.itest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.itest.setGroup('Verification')

itest.dependsOn prepareITestDatabase
itest.dependsOn flywayClean
itest.dependsOn flywayMigrate
itest.dependsOn flywayValidate

flywayClean.mustRunAfter prepareITestDatabase
flywayMigrate.mustRunAfter flywayClean
flywayValidate.mustRunAfter flywayMigrate

//TODO: delete schema after test

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

def outputDir = file("$buildDir/generated-src")

task generateDatasourceSources(type: Copy) {
    from 'configurataion/template'
    into outputDir
    doFirst {
        expand(currentProperties)
    }
}

task prepareGeneratedSourceDirectory << {
    outputDir.deleteDir()
    outputDir.mkdirs()
}

task setTestDatasource << {
    currentProperties = testDatabaseProperties;
}


itest.dependsOn setTestDatasource
arquillianBuild.dependsOn setTestDatasource

compileJava.mustRunAfter setTestDatasource
configureArquillianWar.mustRunAfter setTestDatasource

generateDatasourceSources.dependsOn prepareGeneratedSourceDirectory
compileJava.dependsOn generateDatasourceSources